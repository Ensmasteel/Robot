<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_communication_8h" kind="file" language="C++">
    <compoundname>Communication.h</compoundname>
    <includes local="yes">Arduino.h</includes>
    <includes refid="_message_i_d_8h" local="yes">MessageID.h</includes>
    <includes local="no">Stream.h</includes>
    <includes refid="_vector_8h" local="yes">Vector.h</includes>
    <includedby refid="_actuators_8h" local="yes">Ensmasteel_Bot_2020/Arduino_Mega/Lib/Actuators/Actuators.h</includedby>
    <includedby refid="_actuators___manager_8h" local="yes">Ensmasteel_Bot_2020/Arduino_Mega/Lib/Actuators_Manager/Actuators_Manager.h</includedby>
    <includedby refid="_arduino___mega_2main_8cpp" local="yes">Ensmasteel_Bot_2020/Arduino_Mega/main.cpp</includedby>
    <includedby refid="_communication_8cpp" local="yes">Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp</includedby>
    <includedby refid="_actions_8h" local="yes">Ensmasteel_Bot_2020/Teensy/lib/LesInseparables/Actions.h</includedby>
    <includedby refid="_robot_8h" local="yes">Ensmasteel_Bot_2020/Teensy/lib/Robot/Robot.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="1">
        <label>Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h</label>
        <link refid="_communication_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MessageID.h</label>
        <link refid="_message_i_d_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Print.h</label>
      </node>
      <node id="5">
        <label>Stream.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>Ensmasteel_Bot_2020/Arduino_Mega/Lib/Actuators/Actuators.h</label>
        <link refid="_actuators_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Ensmasteel_Bot_2020/Arduino_Mega/Lib/Actuators_Manager/Actuators_Manager.h</label>
        <link refid="_actuators___manager_8h_source"/>
      </node>
      <node id="1">
        <label>Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h</label>
        <link refid="_communication_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Ensmasteel_Bot_2020/Teensy/lib/LesInseparables/Actions.h</label>
        <link refid="_actions_8h_source"/>
      </node>
      <node id="5">
        <label>Ensmasteel_Bot_2020/Teensy/lib/Robot/Robot.h</label>
        <link refid="_robot_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Ensmasteel_Bot_2020/Teensy/lib/Robot/RobotSimu.h</label>
        <link refid="_robot_simu_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_four_bytes" prot="public">FourBytes</innerclass>
    <innerclass refid="struct_message" prot="public">Message</innerclass>
    <innerclass refid="class_communication" prot="public">Communication</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_communication_8h_1abe7a535f44ae411965038ed97e9ecba3" prot="public" static="no">
        <name>ANTISPAM_MS</name>
        <initializer>300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="4" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_communication_8h_1a3bbcfa4ca69cd4137b0ebda009b816fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_message" kindref="compound">Message</ref></type>
        <definition>Message newMessage</definition>
        <argsstring>(MessageID id, int32_t data)</argsstring>
        <name>newMessage</name>
        <param>
          <type>MessageID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor of a new message passing an ID and the data as parameters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>: the message ID of the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>: The data contained in the message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="struct_message" kindref="compound">Message</ref> ready to send. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="37" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="40" bodyend="46" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="37" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a1f885298f7539920e1f84a6cd5efeca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_message" kindref="compound">Message</ref></type>
        <definition>Message newMessage</definition>
        <argsstring>(MessageID id)</argsstring>
        <name>newMessage</name>
        <param>
          <type>MessageID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Another public constructor, getting only the ID. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID of the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="struct_message" kindref="compound">Message</ref> ready to send, with no Data. Can be fill up later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="44" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="31" bodyend="37" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="44" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a359bf41218cad097f59d152e9f70846d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_message" kindref="compound">Message</ref></type>
        <definition>Message newMessage</definition>
        <argsstring>(MessageID id, uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)</argsstring>
        <name>newMessage</name>
        <param>
          <type>MessageID</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>byte0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>byte1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>byte2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>byte3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Another public constructor, getting four bytes as parameters, and the ID. Ensure you to construct a 6 bytes <ref refid="struct_message" kindref="compound">Message</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte0</parametername>
</parameternamelist>
<parameterdescription>
<para>The first byte of you data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte1</parametername>
</parameternamelist>
<parameterdescription>
<para>The second one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte2</parametername>
</parameternamelist>
<parameterdescription>
<para>The third one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte3</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A message ready to send, only on 6 bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="56" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="48" bodyend="57" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="56" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a73040c3e7a24ae8e7041b97c20d785d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_message" kindref="compound">Message</ref></type>
        <definition>Message newMessage</definition>
        <argsstring>(MessageID id, VectorE vectorE)</argsstring>
        <name>newMessage</name>
        <param>
          <type>MessageID</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_vector_e" kindref="compound">VectorE</ref></type>
          <declname>vectorE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A constructor to create a message containing a vector of data. Ensure that the vector is encoded on 4 bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vectorE</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector containing the data you want to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A message ready to send, containing the data of the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="64" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="59" bodyend="65" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="64" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1af707f633c4215ccc41b6d09a5ee73207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MessageID</type>
        <definition>MessageID extractID</definition>
        <argsstring>(Message message)</argsstring>
        <name>extractID</name>
        <param>
          <type><ref refid="struct_message" kindref="compound">Message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the ID of a message. Useful to read the information got from the sender. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A message to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The message ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="71" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="67" bodyend="69" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="71" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a80d047f818e72c93bbe8510c6c1dfa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_four_bytes" kindref="compound">FourBytes</ref></type>
        <definition>FourBytes extract4Bytes</definition>
        <argsstring>(Message message)</argsstring>
        <name>extract4Bytes</name>
        <param>
          <type><ref refid="struct_message" kindref="compound">Message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a 4 bytes data from the message. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_four_bytes" kindref="compound">FourBytes</ref>, the data to use, encoded on 4 bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="78" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="71" bodyend="74" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="78" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1aa8ea2e55f2fac35de163b8d985a9f816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t extractInt32</definition>
        <argsstring>(Message message)</argsstring>
        <name>extractInt32</name>
        <param>
          <type><ref refid="struct_message" kindref="compound">Message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract an int32_t data (aka a 4 bytes data but encoded all in once). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int32_t, the data to use in one unique variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="85" column="9" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="76" bodyend="78" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="85" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a780be03ebda5bf00dc5611c402116985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector extractVectorE</definition>
        <argsstring>(Message message)</argsstring>
        <name>extractVectorE</name>
        <param>
          <type><ref refid="struct_message" kindref="compound">Message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the same as above, but useful when the message is send with a <ref refid="class_vector" kindref="compound">Vector</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector contained in the message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="92" column="8" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="80" bodyend="87" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="92" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_communication_8h_1a5a6f748cdcffabda7e73f27a99ea3283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Actuator_Order</type>
        <definition>Actuator_Order extractOrder</definition>
        <argsstring>(Message message)</argsstring>
        <name>extractOrder</name>
        <param>
          <type><ref refid="struct_message" kindref="compound">Message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the order contained in the message. Uses all the functions above. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to read containing an order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Actuator_Order the order to send to actuators. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" line="99" column="16" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.cpp" bodystart="89" bodyend="92" declfile="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h" declline="99" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>COMMUNICATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMMUNICATION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ANTISPAM_MS<sp/>300<sp/></highlight><highlight class="comment">//Nombre<sp/>de<sp/>milliseconde<sp/>entre<sp/>deux<sp/>envoi<sp/>de<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Arduino.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MessageID.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_message_box" kindref="compound">MessageBox</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="struct_four_bytes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_four_bytes" kindref="compound">FourBytes</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>byte0,byte1,byte2,byte3;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="struct_message" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_message" kindref="compound">Message</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>_data;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>_ID;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Taille<sp/>de<sp/>6<sp/>octets<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//Je<sp/>fais<sp/>cette<sp/>implémentation<sp/>&quot;non<sp/>POO&quot;<sp/>car<sp/>je<sp/>veux<sp/>etre<sp/>certains<sp/>qu&apos;un<sp/>mesasge<sp/>fasse<sp/>6<sp/>octets....</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight><highlight class="normal"><ref refid="struct_message" kindref="compound">Message</ref><sp/>newMessage(MessageID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>int32_t<sp/>data);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="struct_message" kindref="compound">Message</ref><sp/>newMessage(MessageID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="struct_message" kindref="compound">Message</ref><sp/>newMessage(MessageID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>byte0,uint8_t<sp/>byte1,<sp/>uint8_t<sp/>byte2,<sp/>uint8_t<sp/>byte3);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="struct_message" kindref="compound">Message</ref><sp/>newMessage(MessageID<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_vector_e" kindref="compound">VectorE</ref><sp/>vectorE);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">MessageID<sp/>extractID(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="struct_four_bytes" kindref="compound">FourBytes</ref><sp/>extract4Bytes(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">int32_t<sp/>extractInt32(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/>extractVectorE(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">Actuator_Order<sp/>extractOrder(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="class_communication" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_communication" kindref="compound">Communication</ref></highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_communication_1a431a221c086932c7b4225f6b4d006d17" kindref="member">send</ref>(<ref refid="struct_message" kindref="compound">Message</ref><sp/>message);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_communication_1a628a8d93d56c41f488c0e36fa8614ab4" kindref="member">popOldestMessage</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_message" kindref="compound">Message</ref><sp/><ref refid="class_communication_1a71204b613dd598bc5919d57942eef2f2" kindref="member">peekOldestMessage</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="class_communication_1a56745608a76ca04c31e98f6b1e972b63" kindref="member">inWaitingRx</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="class_communication_1a9729e4f539ba60f67aa2273c0fe471e0" kindref="member">inWaitingTx</ref>();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_communication_1af87402699dbd147b8d24aec9792827b8" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_communication_1aa686ecae406d9e82ca6aab48e2634042" kindref="member">Communication</ref>(Stream*<sp/>port=&amp;Serial);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_communication_1ad2fcf1b78b7cb0869a1048c319a84bcf" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_communication" kindref="compound">Communication</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_communication_1a556bfa49af73d5a2415bbbee6ea6fbed" kindref="member">toTelemetry</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Stream*<sp/>port;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>millisLastSend;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_message_box" kindref="compound">MessageBox</ref>*<sp/>sendingBox;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_message_box" kindref="compound">MessageBox</ref>*<sp/>receiveBox;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Ensmasteel_Bot_2020/Libraries_shared/Communication/Communication.h"/>
  </compounddef>
</doxygen>
