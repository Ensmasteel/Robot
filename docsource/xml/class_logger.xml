<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_logger" kind="class" language="C++" prot="public">
    <compoundname>Logger</compoundname>
    <includes refid="_logger_8h" local="no">Logger.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_logger_1a9ae8f9be4090b8885265fbce1f794b8e" prot="private" static="yes" mutable="no">
        <type>Print *</type>
        <definition>Print * Logger::telemetryPort</definition>
        <argsstring></argsstring>
        <name>telemetryPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="34" column="18" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_logger_1a43ba9db50f221c52502ea18cfc034148" prot="private" static="yes" mutable="no">
        <type>Print *</type>
        <definition>Print * Logger::infoPort</definition>
        <argsstring></argsstring>
        <name>infoPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="35" column="18" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_logger_1ac9e33f811098d02e7035daf9a4b103c0" prot="private" static="yes" mutable="no">
        <type>Print *</type>
        <definition>Print * Logger::debugPort</definition>
        <argsstring></argsstring>
        <name>debugPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="36" column="18" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_logger_1add8875614e0f7f9e0945fcbcd2d39c1f" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Logger::telemetryEnabled</definition>
        <argsstring></argsstring>
        <name>telemetryEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="38" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_logger_1ab0879658904b8d2328a37912a8a7fff3" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Logger::infoEnabled</definition>
        <argsstring></argsstring>
        <name>infoEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="39" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_logger_1a651107ec179fb76959e685d162274c5e" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool Logger::debugEnabled</definition>
        <argsstring></argsstring>
        <name>debugEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="40" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Logger::debug</definition>
        <argsstring>(const String &amp;message)</argsstring>
        <name>debug</name>
        <param>
          <type>const String &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a message on debugPort. Works same as System.out.print in Java or std::cout&lt;&lt;message in C++. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>: String containing the message you want to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="48" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="class_logger_1a2b76efaa0362d362a706bd511169e401" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Logger::debugln</definition>
        <argsstring>(const String &amp;message)</argsstring>
        <name>debugln</name>
        <param>
          <type>const String &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as debug, but add an EndLine character. Works same as System.out.println in Java. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>: String, the message you want to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="55" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_logger_1a9a94fd1ce9c8008bfa9dcea344506c57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Logger::infoln</definition>
        <argsstring>(const String &amp;message)</argsstring>
        <name>infoln</name>
        <param>
          <type>const String &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print an important message on infoPort and EndLine (mandatory). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>: String, The message you want to print on infoPort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="62" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Logger::toTelemetry</definition>
        <argsstring>(const String &amp;name, const String &amp;value)</argsstring>
        <name>toTelemetry</name>
        <param>
          <type>const String &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a named parameter to telemetry. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>: String, the parameter&apos;s name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>: String, the parameter&apos;s value, converted as a String. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="70" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_logger_1a28d9c8374090b32982cdab8ba3e032e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Logger::setup</definition>
        <argsstring>(Print *telemetryPort=&amp;Serial, Print *infoPort=&amp;Serial, Print *debugPort=&amp;Serial, bool telemetry=true, bool info=true, bool debug=false)</argsstring>
        <name>setup</name>
        <param>
          <type>Print *</type>
          <declname>telemetryPort</declname>
          <defval>&amp;Serial</defval>
        </param>
        <param>
          <type>Print *</type>
          <declname>infoPort</declname>
          <defval>&amp;Serial</defval>
        </param>
        <param>
          <type>Print *</type>
          <declname>debugPort</declname>
          <defval>&amp;Serial</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>telemetry</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>info</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>debug</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set up all the necessary information to use the other functions. The port have to be initialized before being passed in argument of this function. Must be used before any other function in this module. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>telemetryPort</parametername>
</parameternamelist>
<parameterdescription>
<para>: The telemetry port. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>infoPort</parametername>
</parameternamelist>
<parameterdescription>
<para>: The info Port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debugPort</parametername>
</parameternamelist>
<parameterdescription>
<para>: The debug Port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>telemetry</parametername>
</parameternamelist>
<parameterdescription>
<para>: bool, Telemetry enabled? Default is true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>: bool, infoPort enabled? Default is true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debug</parametername>
</parameternamelist>
<parameterdescription>
<para>: bool, debugPort enabled? Default is false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="83" column="17" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.cpp" bodystart="36" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Defines the <ref refid="class_logger" kindref="compound">Logger</ref> class that will enables you to write messages. </para>
    </detaileddescription>
    <location file="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" line="31" column="1" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Logger/Logger.h" bodystart="32" bodyend="84"/>
    <listofallmembers>
      <member refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" prot="public" virt="non-virtual"><scope>Logger</scope><name>debug</name></member>
      <member refid="class_logger_1a651107ec179fb76959e685d162274c5e" prot="private" virt="non-virtual"><scope>Logger</scope><name>debugEnabled</name></member>
      <member refid="class_logger_1a2b76efaa0362d362a706bd511169e401" prot="public" virt="non-virtual"><scope>Logger</scope><name>debugln</name></member>
      <member refid="class_logger_1ac9e33f811098d02e7035daf9a4b103c0" prot="private" virt="non-virtual"><scope>Logger</scope><name>debugPort</name></member>
      <member refid="class_logger_1ab0879658904b8d2328a37912a8a7fff3" prot="private" virt="non-virtual"><scope>Logger</scope><name>infoEnabled</name></member>
      <member refid="class_logger_1a9a94fd1ce9c8008bfa9dcea344506c57" prot="public" virt="non-virtual"><scope>Logger</scope><name>infoln</name></member>
      <member refid="class_logger_1a43ba9db50f221c52502ea18cfc034148" prot="private" virt="non-virtual"><scope>Logger</scope><name>infoPort</name></member>
      <member refid="class_logger_1a28d9c8374090b32982cdab8ba3e032e9" prot="public" virt="non-virtual"><scope>Logger</scope><name>setup</name></member>
      <member refid="class_logger_1add8875614e0f7f9e0945fcbcd2d39c1f" prot="private" virt="non-virtual"><scope>Logger</scope><name>telemetryEnabled</name></member>
      <member refid="class_logger_1a9ae8f9be4090b8885265fbce1f794b8e" prot="private" virt="non-virtual"><scope>Logger</scope><name>telemetryPort</name></member>
      <member refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" prot="public" virt="non-virtual"><scope>Logger</scope><name>toTelemetry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
