<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_math__functions_8cpp" kind="file" language="C++">
    <compoundname>Math_functions.cpp</compoundname>
    <includes refid="_math__functions_8h" local="yes">Math_functions.h</includes>
    <includes refid="_logger_8h" local="yes">Logger.h</includes>
    <incdepgraph>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="4">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp</label>
        <link refid="_math__functions_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Math_functions.h</label>
        <link refid="_math__functions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Print.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_math__functions_8cpp_1a7805c222c7f477f29393a265e05b65de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome init_polynome</definition>
        <argsstring>(float a0, float a1, float a2, float a3, float a4, float a5, float a6)</argsstring>
        <name>init_polynome</name>
        <param>
          <type>float</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="63" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="63" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1ae2af88862ce81fe9c3a7b05fb7206359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Derivative_ptr</definition>
        <argsstring>(Polynome *P)</argsstring>
        <name>Derivative_ptr</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>pointer on derivative function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="76" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1a71a619c3d456114604a527b82a0f2f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Derivative</definition>
        <argsstring>(Polynome P)</argsstring>
        <name>Derivative</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>derivative of the polynomial function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="87" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1a27f86b34743c7ae57e0c2a6cf4b1cc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Multiplication_ptr</definition>
        <argsstring>(Polynome *P1, Polynome *P2)</argsstring>
        <name>Multiplication_ptr</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P2</declname>
        </param>
        <briefdescription>
<para>Need K[i&gt;=4] = 0 ! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="98" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="98" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1ad56e5f80070e290dfae5ec74f4a3901b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Multiplication</definition>
        <argsstring>(Polynome P1, Polynome P2)</argsstring>
        <name>Multiplication</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="112" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1a43fe8fa5827ec9f267595b2b57160e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Square_ptr</definition>
        <argsstring>(Polynome *P)</argsstring>
        <name>Square_ptr</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="126" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1a6b4b4c052515984986f59d5701a17b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Square</definition>
        <argsstring>(Polynome P)</argsstring>
        <name>Square</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="134" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1ad72f36e3db56353097aa6c3e86dc9f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Sum_ptr</definition>
        <argsstring>(Polynome *P1, Polynome *P2)</argsstring>
        <name>Sum_ptr</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref> *</type>
          <declname>P2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="142" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="_math__functions_8cpp_1a60b06fb4d8b9f9bae01e137f5520f645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
        <definition>Polynome Sum</definition>
        <argsstring>(Polynome P1, Polynome P2)</argsstring>
        <name>Sum</name>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="class_polynome" kindref="compound">Polynome</ref></type>
          <declname>P2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" line="153" column="10" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp" bodystart="153" bodyend="162"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Math_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Polynome::Polynome(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a6)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[0]<sp/>=<sp/>a0;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[1]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[2]<sp/>=<sp/>a2;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[3]<sp/>=<sp/>a3;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[4]<sp/>=<sp/>a4;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[5]<sp/>=<sp/>a5;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[6]<sp/>=<sp/>a6;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_polynome_1a5103725c5ea2d5ebb30b1dbab7c6b9cb" kindref="member">Polynome::f</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xn<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>i<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>out<sp/>+<sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[i]<sp/>*<sp/>xn;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xn<sp/>=<sp/>xn<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_polynome_1a0182419d4f284852199e7eee0ab75a8e" kindref="member">Polynome::df</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xn<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>i<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>out<sp/>+<sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[i]<sp/>*<sp/>xn<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xn<sp/>=<sp/>xn<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Polynome::set(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a6)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[0]<sp/>=<sp/>a0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[1]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[2]<sp/>=<sp/>a2;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[3]<sp/>=<sp/>a3;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[4]<sp/>=<sp/>a4;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[5]<sp/>=<sp/>a5;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[6]<sp/>=<sp/>a6;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Polynome::toDebug()</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>i<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" kindref="member">Logger::debug</ref>(String(<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[i]));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" kindref="member">Logger::debug</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>x^&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" kindref="member">Logger::debug</ref>(String(i));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" kindref="member">Logger::debug</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1afdad0b5c9123fb3a3e7c70b71a78216f" kindref="member">Logger::debug</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>init_polynome(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a6)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[0]<sp/>=<sp/>a0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[1]<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[2]<sp/>=<sp/>a2;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[3]<sp/>=<sp/>a3;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[4]<sp/>=<sp/>a4;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[5]<sp/>=<sp/>a5;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[6]<sp/>=<sp/>a6;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Derivative_ptr(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref><sp/>-<sp/>1;<sp/>d<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>=<sp/>(float)(d<sp/>+<sp/>1)<sp/>*<sp/>P-&gt;<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Derivative(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref><sp/>-<sp/>1;<sp/>d<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>=<sp/>(float)(d<sp/>+<sp/>1)<sp/>*<sp/>P.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Multiplication_ptr(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P1,<sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P2)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>k<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>k;<sp/>i<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[k]<sp/>+=<sp/>P1-&gt;<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[i]<sp/>*<sp/>P2-&gt;<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[k<sp/>-<sp/>i];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Multiplication(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P1,<sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P2)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>k<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>k;<sp/>i<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[k]<sp/>+=<sp/>P1.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[i]<sp/>*<sp/>P2.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[k<sp/>-<sp/>i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Square_ptr(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>Multiplication_ptr(P,<sp/>P);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Square(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>Multiplication(P,<sp/>P);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Sum_ptr(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P1,<sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>*P2)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>d<sp/>+=<sp/>1)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>=<sp/>P1-&gt;<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>+<sp/>P2-&gt;<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>Sum(<ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P1,<sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>P2)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_polynome" kindref="compound">Polynome</ref><sp/>out;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>init_polynome();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>out.<ref refid="class_polynome_1a3a3c50178a8c0df41d5bcd0c44afd778" kindref="member">DEGRE_MAX</ref>;<sp/>d++)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>=<sp/>P1.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d]<sp/>+<sp/>P2.<ref refid="class_polynome_1a2673e8bb2b601ce3243fc356797de8e3" kindref="member">K</ref>[d];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_trapezoidal___function_1a9b07e3899a1f01dbbebafe58581cf9f8" kindref="member">Trapezoidal_Function::f</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zero)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_triangleFunction)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Logger::infoln(&quot;triangle<sp/>function&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_tMax)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>x<sp/>*<sp/>_upRamp;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(_duration<sp/>-<sp/>x)<sp/>*<sp/>_downRamp;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_tMax)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>x<sp/>*<sp/>_upRamp;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration<sp/>-<sp/>(_max<sp/>/<sp/>_downRamp))</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>_max;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(_duration<sp/>-<sp/>x)<sp/>*<sp/>_downRamp;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_trapezoidal___function_1ad2990f1d19a20d3d5a37091193f0930d" kindref="member">Trapezoidal_Function::df</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zero)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_triangleFunction)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Logger::infoln(&quot;triangle<sp/>function&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_tMax)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>_upRamp;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>_downRamp;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_tMax)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>_upRamp;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration<sp/>-<sp/>(_max<sp/>/<sp/>_downRamp))</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>_duration)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>_downRamp;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">Trapezoidal_Function::Trapezoidal_Function(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>upRamp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>downRamp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>_upRamp<sp/>=<sp/>upRamp;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>_downRamp<sp/>=<sp/>downRamp;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>_max<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>_distance<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>computeDuration();</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_trapezoidal___function_1a1a31a3acb72a47d405b5491ba0c6105f" kindref="member">Trapezoidal_Function::set</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>upRamp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>downRamp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>_upRamp<sp/>=<sp/>upRamp;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>_downRamp<sp/>=<sp/>downRamp;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>_max<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>_distance<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>computeDuration();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_duration;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Trapezoidal_Function::computeDuration()</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceMin_maxReached<sp/>=<sp/><sp/>((_max*_max)/2.0)<sp/>*<sp/>((1.0/_upRamp)<sp/>+<sp/>(1.0/_downRamp));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distanceMin_maxReached<sp/>&gt;<sp/>_distance)<sp/></highlight><highlight class="comment">//triangle<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_triangleFunction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_max<sp/>=<sp/>sqrt((2.0*_distance)<sp/>/<sp/>((1.0/_downRamp)<sp/>+<sp/>1.0/_upRamp));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tMax<sp/>=<sp/>_max<sp/>/<sp/>_upRamp;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_duration<sp/>=<sp/>_max<sp/>/<sp/>_upRamp<sp/>+<sp/>_max<sp/>/<sp/>_downRamp;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>True<sp/>trapezoidale<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_triangleFunction<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tMax<sp/>=<sp/>_max<sp/>/<sp/>_upRamp;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_duration<sp/>=<sp/>(_distance<sp/>/<sp/>_max)<sp/>+<sp/>((_max<sp/>/<sp/>2.0)<sp/>*<sp/>((1.0/_downRamp)<sp/>+<sp/>(1.0/_upRamp)));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_duration;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Trapezoidal_Function::getDuration()</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_duration;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Trapezoidal_Function::isTriangle()</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_triangleFunction;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_trapezoidal___function_1a7d599b15e5658f914bdde13e68362c90" kindref="member">Trapezoidal_Function::setZero</ref>()</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Ensmasteel_Bot_2020/Teensy/lib/Math_functions/Math_functions.cpp"/>
  </compounddef>
</doxygen>
