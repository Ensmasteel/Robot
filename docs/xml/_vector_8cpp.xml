<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_vector_8cpp" kind="file" language="C++">
    <compoundname>Vector.cpp</compoundname>
    <includes refid="_vector_8h" local="yes">Vector.h</includes>
    <includes local="yes">Arduino.h</includes>
    <incdepgraph>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="4">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp</label>
        <link refid="_vector_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Print.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vector_8cpp_1a1de8b424552bdcaeb85fb794107081d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float normalizeAngle</definition>
        <argsstring>(float angle)</argsstring>
        <name>normalizeAngle</name>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ensmasteel Library - <ref refid="class_vector" kindref="compound">Vector</ref> modelisation</para>
<para>author : Arthur FINDELAIR - EnsmaSteel, github.com/ArthurFDLR date : October 2019 Normalize an angle, from degree to rad. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>: float, angle value in degree. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: float, angle value in rad. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" line="4" column="7" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="4" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="_vector_8cpp_1a57bf3435d9cb0c28955ddf459723fb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector directeur</definition>
        <argsstring>(float theta)</argsstring>
        <name>directeur</name>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Defines the principal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" line="97" column="8" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="97" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Arduino.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normalizeAngle(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>angle<sp/>-<sp/>(2<sp/>*<sp/>PI)<sp/>*<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(angle<sp/>/<sp/>(2<sp/>*<sp/>PI)));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>&gt;<sp/>PI)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out<sp/>-<sp/>2<sp/>*<sp/>PI);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>&lt;=<sp/>-PI)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out<sp/>+<sp/>2<sp/>*<sp/>PI);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" kindref="member">Vector::Vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="class_vector_1a8636c13924ae2a8f08a5c56c1bdee35d" kindref="member">Vector::operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" kindref="member">Vector</ref>(_x<sp/>+<sp/>other._x,<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>+<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1aad6b7dcfd087005378aa64e506cf03d2" kindref="member">Vector::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>_x+=other._x;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>+=other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="class_vector_1a78273e8287626f263ca0cfb26a6f9770" kindref="member">Vector::operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" kindref="member">Vector</ref>(_x<sp/>-<sp/>other._x,<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>-<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a4bb01f8acdc32d677ddadf9d0896cc1c" kindref="member">Vector::operator%</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_x<sp/>*<sp/>other._x<sp/>+<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>*<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="class_vector_1a2cd6694ac4999ed6686d9d149de999ea" kindref="member">Vector::operator*</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scalaire)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" kindref="member">Vector</ref>(_x<sp/>*<sp/>scalaire,<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>*<sp/>scalaire);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ae485d630cc9cbbfcec82f93ab4d5ee6c" kindref="member">Vector::operator==</ref>(<ref refid="class_vector" kindref="compound">Vector</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(abs(_x<sp/>-<sp/>other._x)<sp/>&lt;=<sp/>1e-6)<sp/>&amp;&amp;<sp/>(abs(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>-<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)<sp/>&lt;=<sp/>1e-6);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a4d643a71ea7c87cb77ab7bdfb26b42ba" kindref="member">Vector::norm</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(_x<sp/>*<sp/>_x<sp/>+<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>*<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ac83edd3ce21c2eea555a360f64cf0acc" kindref="member">Vector::angle</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atan2(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>,_x);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a44b5d0725bbfe4baa9e5485b50aede9a" kindref="member">Vector::distanceWith</ref>(<ref refid="class_vector" kindref="compound">Vector</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(((_x<sp/>-<sp/>other._x)<sp/>*<sp/>(_x<sp/>-<sp/>other._x))<sp/>+<sp/>((<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>-<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)<sp/>*<sp/>(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>-<sp/>other.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Equivalent<sp/>a:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>operator-(other).norm()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1abd1526dde6917905a9331e0b16d9fe2a" kindref="member">Vector::print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>info)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a9a94fd1ce9c8008bfa9dcea344506c57" kindref="member">Logger::infoln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a2b76efaa0362d362a706bd511169e401" kindref="member">Logger::debugln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>));</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ac12c872fc6337ea5992e2b91d35ca5b9" kindref="member">Vector::toTelemetry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,String(_x));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/><ref refid="class_vector_1a3879877fbfc3752e7ca1b64af6d557e6" kindref="member">Vector::rotate</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector</ref><sp/>out;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>out._x<sp/>=<sp/>_x<sp/>*<sp/>cos(theta)<sp/>-<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>*<sp/>sin(theta);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>=<sp/><ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref><sp/>*<sp/>cos(theta)<sp/>+<sp/>_x<sp/>*<sp/>sin(theta);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/>directeur(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>(cos(theta),sin(theta));</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="class_vector_e_1a5b9897cfe6407e9504b9efdba349f51b" kindref="member">VectorE::VectorE</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta)<sp/>:<sp/><ref refid="class_vector" kindref="compound">Vector</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>_theta<sp/>=<sp/>theta;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_e_1add2733ccf3d8e7dc816ba952fa4120fb" kindref="member">VectorE::normalizeTheta</ref>()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>_theta<sp/>=<sp/>normalizeAngle(_theta);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_e_1a29db572cad2265dd57c32a0923221a8c" kindref="member">VectorE::print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>info)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a9a94fd1ce9c8008bfa9dcea344506c57" kindref="member">Logger::infoln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|Th=<sp/>&quot;</highlight><highlight class="normal">+String(_theta));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a2b76efaa0362d362a706bd511169e401" kindref="member">Logger::debugln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|Th=<sp/>&quot;</highlight><highlight class="normal">+String(_theta));</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_e_1a62e9a0a3cde04daa20f322a6d852693c" kindref="member">VectorE::toTelemetry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,String(_x));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;Th&quot;</highlight><highlight class="normal">,String(_theta));</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vector_e_1a52eeb7fe68286c810caef10e2b5467bc" kindref="member">VectorE::operator==</ref>(<ref refid="class_vector_e" kindref="compound">VectorE</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Vector::operator==(other))<sp/>&amp;&amp;<sp/>(abs(_theta<sp/>-<sp/>other._theta)<sp/>&lt;=<sp/>1e-9);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="class_cinetique_1adf5ef593311b41036cf0f81d24b6d0bb" kindref="member">Cinetique::Cinetique</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w)<sp/>:<sp/><ref refid="class_vector_e" kindref="compound">VectorE</ref>(x,<sp/>y,<sp/>theta)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>_v<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_cinetique_1a3d712c5f685be073b402cc33e1ab038c" kindref="member">Cinetique::print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>info)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a9a94fd1ce9c8008bfa9dcea344506c57" kindref="member">Logger::infoln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|Th=<sp/>&quot;</highlight><highlight class="normal">+String(_theta)+</highlight><highlight class="stringliteral">&quot;<sp/>|v=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|w=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_1a2b76efaa0362d362a706bd511169e401" kindref="member">Logger::debugln</ref>(prefix+</highlight><highlight class="stringliteral">&quot;::<sp/>x=<sp/>&quot;</highlight><highlight class="normal">+String(_x)+</highlight><highlight class="stringliteral">&quot;<sp/>|y=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|Th=<sp/>&quot;</highlight><highlight class="normal">+String(_theta)+</highlight><highlight class="stringliteral">&quot;<sp/>|v=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>)+</highlight><highlight class="stringliteral">&quot;<sp/>|w=<sp/>&quot;</highlight><highlight class="normal">+String(<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>));</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_cinetique_1a1aab1668c139a7040c4a0d83d85422c7" kindref="member">Cinetique::toTelemetry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>prefix)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,String(_x,3));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,String(<ref refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" kindref="member">_y</ref>,3));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;Th&quot;</highlight><highlight class="normal">,String(_theta,3));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,String(<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>,3));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,String(<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>,3));</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_cinetique_1a3aaa4453fad5ffc7b730db1c100a35b1" kindref="member">Cinetique::operator==</ref>(<ref refid="class_cinetique" kindref="compound">Cinetique</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_e_1a52eeb7fe68286c810caef10e2b5467bc" kindref="member">VectorE::operator==</ref>(other)<sp/>&amp;&amp;<sp/><ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>==other.<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref><sp/>&amp;&amp;<sp/><ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>==other.<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======<sp/><sp/><sp/><sp/><sp/>TARGETS<sp/><sp/><sp/><sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">TeamColor<sp/>Target::teamColor<sp/>=<sp/>BLEU;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Target::setTeamColor(TeamColor<sp/>color)<sp/>{teamColor=color;}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">Target::Target()<sp/>{type=RELATIVE;}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======<sp/><sp/><sp/><sp/><sp/>TargetVector<sp/><sp/><sp/><sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="class_vector" kindref="compound">Vector</ref><sp/>TargetVector::getVector()</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ABSOLUTE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector</ref>(_xB,_yB);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RELATIVE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_vector" kindref="compound">Vector</ref>(_xB,_yB))<sp/>:<sp/>(<ref refid="class_vector" kindref="compound">Vector</ref>(LENGTH_TABLE<sp/>-<sp/>_xB,_yB))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIFIC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_vector" kindref="compound">Vector</ref>(_xB,_yB))<sp/>:<sp/>(<ref refid="class_vector" kindref="compound">Vector</ref>(_xJ,_yJ))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">TargetVector::TargetVector(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>absolute)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(absolute)?(ABSOLUTE):(RELATIVE);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=x;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=y;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">TargetVector::TargetVector(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yJ)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>SPECIFIC;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=xB;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=yB;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>_xJ=xJ;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>_yJ=yJ;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======<sp/><sp/><sp/><sp/><sp/>TargetVectorE<sp/><sp/><sp/><sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>====================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="class_vector_e" kindref="compound">VectorE</ref><sp/>TargetVectorE::getVectorE()</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ABSOLUTE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_e" kindref="compound">VectorE</ref>(_xB,_yB,_thetaB);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RELATIVE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_vector_e" kindref="compound">VectorE</ref>(_xB,_yB,_thetaB))<sp/>:<sp/>(<ref refid="class_vector_e" kindref="compound">VectorE</ref>(LENGTH_TABLE<sp/>-<sp/>_xB,_yB,PI<sp/>-<sp/>_thetaB))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIFIC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_vector_e" kindref="compound">VectorE</ref>(_xB,_yB,_thetaB))<sp/>:<sp/>(<ref refid="class_vector_e" kindref="compound">VectorE</ref>(_xJ,_yJ,_thetaJ))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">TargetVectorE::TargetVectorE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>absolute)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(absolute)?(ABSOLUTE):(RELATIVE);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=x;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=y;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=theta;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">TargetVectorE::TargetVectorE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaJ)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>SPECIFIC;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=xB;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=yB;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=thetaB;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>_xJ=xJ;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>_yJ=yJ;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaJ=thetaJ;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">TargetVectorE::TargetVectorE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>absolute)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(absolute)?(ABSOLUTE):(RELATIVE);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=theta;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">TargetVectorE::TargetVectorE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaJ)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>SPECIFIC;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>_xJ=0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>_yJ=0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=thetaB;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaJ=thetaJ;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======<sp/><sp/><sp/><sp/><sp/>TargetCinetique<sp/><sp/><sp/><sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>====================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="class_cinetique" kindref="compound">Cinetique</ref><sp/>TargetCinetique::getCinetique()</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ABSOLUTE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_cinetique" kindref="compound">Cinetique</ref>(_xB,_yB,_thetaB,_v,_w);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RELATIVE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_cinetique" kindref="compound">Cinetique</ref>(_xB,_yB,_thetaB,_v,_w))<sp/>:<sp/>(<ref refid="class_cinetique" kindref="compound">Cinetique</ref>(LENGTH_TABLE<sp/>-<sp/>_xB,_yB,PI<sp/>-<sp/>_thetaB,_v,_w))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIFIC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(teamColor==BLEU)<sp/>?<sp/>(<ref refid="class_cinetique" kindref="compound">Cinetique</ref>(_xB,_yB,_thetaB,_v,_w))<sp/>:<sp/>(<ref refid="class_cinetique" kindref="compound">Cinetique</ref>(_xJ,_yJ,_thetaJ,_v,_w))<sp/>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">TargetCinetique::TargetCinetique(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>absolute)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(absolute)?(ABSOLUTE):(RELATIVE);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=x;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=y;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=theta;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>_v=v;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>_w=w;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">TargetCinetique::TargetCinetique(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaB,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thetaJ,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w)<sp/>:<sp/><ref refid="class_target" kindref="compound">Target</ref>()</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>SPECIFIC;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>_xB=xB;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>_yB=yB;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaB=thetaB;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>_xJ=xJ;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>_yJ=yJ;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>_thetaJ=thetaJ;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>_v=v;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>_w=w;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp"/>
  </compounddef>
</doxygen>
