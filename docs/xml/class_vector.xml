<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_vector" kind="class" language="C++" prot="public">
    <compoundname>Vector</compoundname>
    <derivedcompoundref refid="class_vector_e" prot="public" virt="non-virtual">VectorE</derivedcompoundref>
    <includes refid="_vector_8h" local="no">Vector.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_vector_1a57a10b08dd7ec25dbaceb6bc5e7ab16a" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float Vector::_x</definition>
        <argsstring></argsstring>
        <name>_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="27" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float Vector::_y</definition>
        <argsstring></argsstring>
        <name>_y</name>
        <briefdescription>
<para>Coordinates of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="27" column="14" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(float x=0.0, float y=0.0)</argsstring>
        <name>Vector</name>
        <param>
          <type>float</type>
          <declname>x</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public constructor of the vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>: float, X-axis coordinate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>: float, Y-axis coordinate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="34" column="5" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a8636c13924ae2a8f08a5c56c1bdee35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator+</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Redefines the + operator to work with vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="36" column="12" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1aad6b7dcfd087005378aa64e506cf03d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::operator+=</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Redefines the += operator to work with vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="37" column="10" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a78273e8287626f263ca0cfb26a6f9770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator-</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Redefines the - operator to work with vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="38" column="12" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a4bb01f8acdc32d677ddadf9d0896cc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Vector::operator%</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Scalar product. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="39" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a2cd6694ac4999ed6686d9d149de999ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::operator*</definition>
        <argsstring>(const float scalaire)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>scalaire</declname>
        </param>
        <briefdescription>
<para>Homothety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="40" column="12" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1ae485d630cc9cbbfcec82f93ab4d5ee6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Vector::operator==</definition>
        <argsstring>(Vector const &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Redefines the == operator to work with vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="41" column="10" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a4d643a71ea7c87cb77ab7bdfb26b42ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Vector::norm</definition>
        <argsstring>()</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Returns the vector&apos;s norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="43" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1ac83edd3ce21c2eea555a360f64cf0acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Vector::angle</definition>
        <argsstring>()</argsstring>
        <name>angle</name>
        <briefdescription>
<para>Returns the vector&apos;s angle with base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="44" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a44b5d0725bbfe4baa9e5485b50aede9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Vector::distanceWith</definition>
        <argsstring>(Vector &amp;other)</argsstring>
        <name>distanceWith</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the distance between two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="45" column="11" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1abd1526dde6917905a9331e0b16d9fe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::print</definition>
        <argsstring>(const String &amp;prefix=&quot;&quot;, bool info=false)</argsstring>
        <name>print</name>
        <param>
          <type>const String &amp;</type>
          <declname>prefix</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>info</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Prints the values of vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="46" column="10" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1ac12c872fc6337ea5992e2b91d35ca5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::toTelemetry</definition>
        <argsstring>(const String &amp;prefix=&quot;&quot;)</argsstring>
        <name>toTelemetry</name>
        <param>
          <type>const String &amp;</type>
          <declname>prefix</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Send the vectors&apos; info to telemetry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="47" column="10" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_1a3879877fbfc3752e7ca1b64af6d557e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::rotate</definition>
        <argsstring>(float theta)</argsstring>
        <name>rotate</name>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Adds an angle to <ref refid="class_vector" kindref="compound">Vector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="48" column="12" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.cpp" bodystart="87" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class defining the vector model used in this code. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Cinetique</label>
        <link refid="class_cinetique"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Vector</label>
        <link refid="class_vector"/>
      </node>
      <node id="2">
        <label>VectorE</label>
        <link refid="class_vector_e"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" line="23" column="1" bodyfile="Ensmasteel_Bot_2020/Libraries_shared/Vector/Vector.h" bodystart="24" bodyend="49"/>
    <listofallmembers>
      <member refid="class_vector_1a57a10b08dd7ec25dbaceb6bc5e7ab16a" prot="public" virt="non-virtual"><scope>Vector</scope><name>_x</name></member>
      <member refid="class_vector_1acfd6a472304b3832fd37b4dbf3c90c9b" prot="public" virt="non-virtual"><scope>Vector</scope><name>_y</name></member>
      <member refid="class_vector_1ac83edd3ce21c2eea555a360f64cf0acc" prot="public" virt="non-virtual"><scope>Vector</scope><name>angle</name></member>
      <member refid="class_vector_1a44b5d0725bbfe4baa9e5485b50aede9a" prot="public" virt="non-virtual"><scope>Vector</scope><name>distanceWith</name></member>
      <member refid="class_vector_1a4d643a71ea7c87cb77ab7bdfb26b42ba" prot="public" virt="non-virtual"><scope>Vector</scope><name>norm</name></member>
      <member refid="class_vector_1a4bb01f8acdc32d677ddadf9d0896cc1c" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator%</name></member>
      <member refid="class_vector_1a2cd6694ac4999ed6686d9d149de999ea" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator*</name></member>
      <member refid="class_vector_1a8636c13924ae2a8f08a5c56c1bdee35d" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+</name></member>
      <member refid="class_vector_1aad6b7dcfd087005378aa64e506cf03d2" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator+=</name></member>
      <member refid="class_vector_1a78273e8287626f263ca0cfb26a6f9770" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator-</name></member>
      <member refid="class_vector_1ae485d630cc9cbbfcec82f93ab4d5ee6c" prot="public" virt="non-virtual"><scope>Vector</scope><name>operator==</name></member>
      <member refid="class_vector_1abd1526dde6917905a9331e0b16d9fe2a" prot="public" virt="non-virtual"><scope>Vector</scope><name>print</name></member>
      <member refid="class_vector_1a3879877fbfc3752e7ca1b64af6d557e6" prot="public" virt="non-virtual"><scope>Vector</scope><name>rotate</name></member>
      <member refid="class_vector_1ac12c872fc6337ea5992e2b91d35ca5b9" prot="public" virt="non-virtual"><scope>Vector</scope><name>toTelemetry</name></member>
      <member refid="class_vector_1a2bf51c822183b84dc44304cb1cf48fa3" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
