<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_p_i_d_8cpp" kind="file" language="C++">
    <compoundname>PID.cpp</compoundname>
    <includes refid="_p_i_d_8h" local="yes">PID.h</includes>
    <includes refid="_error_manager_8h" local="yes">ErrorManager.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Arduino.h</label>
      </node>
      <node id="3">
        <label>MoveProfile.h</label>
        <link refid="_move_profile_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ErrorManager.h</label>
        <link refid="_error_manager_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Filtre.h</label>
        <link refid="_filtre_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Ensmasteel_Bot_2020/Teensy/lib/PID/PID.cpp</label>
        <link refid="_p_i_d_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>PID.h</label>
        <link refid="_p_i_d_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Print.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_i_d_8cpp_1af023ef1016a4cc0377bd8d9fb9eef01c" prot="public" static="no">
        <name>RECONVERGENCE</name>
        <initializer>0.05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Ensmasteel_Bot_2020/Teensy/lib/PID/PID.cpp" line="3" column="11" bodyfile="Ensmasteel_Bot_2020/Teensy/lib/PID/PID.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PID.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ErrorManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECONVERGENCE<sp/>0.05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//SI<sp/>le<sp/>robot<sp/>est<sp/>eloign√©<sp/>de<sp/>plus<sp/>de<sp/>RECONVERGENCE<sp/>metres,<sp/>le<sp/>PID<sp/>angulaire<sp/>s&apos;occupe<sp/>a<sp/>100%<sp/>de<sp/>rejoindre<sp/>le<sp/>ghost,<sp/>pas<sp/>de<sp/>mimer<sp/>le<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Score::reset()</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cumulError=0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;maxOvershoot=0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nbInversion=0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Score::toTelemetry(String<sp/>prefix)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;cum&quot;</highlight><highlight class="normal">,String(cumulError));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;ovs&quot;</highlight><highlight class="normal">,String(maxOvershoot));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_1ae363ca6abc4efcf0c8b89a4ea520a4a3" kindref="member">Logger::toTelemetry</ref>(prefix+</highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">,String(nbInversion));</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PID::reset()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;iTerm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>score.reset();</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="class_score" kindref="compound">Score</ref><sp/>PID::getScore(){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>score;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PID::setCurrentProfile(MoveProfileName<sp/>name){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;currentProfile<sp/>=<sp/><ref refid="class_move_profiles_1ab77123cf90ad556314e4129fc7d775fb" kindref="member">MoveProfiles::get</ref>(name,!modulo360);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="class_move_profile" kindref="compound">MoveProfile</ref>*<sp/>PID::getCurrentProfile(){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentProfile;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PID::compute(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xTarget,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dxTarget,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dError;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modulo360)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>normalizeAngle(xTarget<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>xTarget<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>dxF.in(dx,<sp/>dt);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>dError<sp/>=<sp/>dxTarget<sp/>-<sp/>dxF.out();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>iTerm<sp/>+=<sp/>error<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>close<sp/>=<sp/>(abs(error)<sp/>&lt;=<sp/>currentProfile-&gt;epsilon)<sp/>&amp;&amp;<sp/>(abs(dError)<sp/>&lt;=currentProfile-&gt;<ref refid="class_move_profile_1a740001da0357e7d9ef6541b05f610a96" kindref="member">dEpsilon</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(error)<sp/>&gt;<sp/>currentProfile-&gt;<ref refid="class_move_profile_1a14c5ee5b9e30ae7f8e1bdb16888bd700" kindref="member">maxErr</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeTooFar<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeTooFar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>tooFar<sp/>=<sp/>timeTooFar<sp/>&gt;<sp/>TIMETOOFAR;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tooFar)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_error_manager_1a7bed90237b637c43f383d4c3fd71baeb" kindref="member">ErrorManager::raise</ref>(PID_FAIL_ERROR);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>score.cumulError+=abs(error)*dt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dxTarget&gt;=0<sp/>&amp;&amp;<sp/>error&lt;0)<sp/>||<sp/>(dxTarget&lt;0<sp/>&amp;&amp;<sp/>error&gt;0))<sp/></highlight><highlight class="comment">//Condition<sp/>d&apos;overshoot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score.maxOvershoot<sp/>=<sp/>max(score.maxOvershoot,<sp/>abs(error));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>constrain(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentProfile-&gt;KP<sp/>*<sp/>error<sp/>+<sp/>currentProfile-&gt;KI<sp/>*<sp/>iTerm<sp/>+<sp/>currentProfile-&gt;KD<sp/>*<sp/>(currentProfile-&gt;<ref refid="class_move_profile_1a0f8213533fdb61cc47f510ffe1ad6495" kindref="member">KA</ref>*dxTarget<sp/>-<sp/>dxF.out()),<sp/>-1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastOut*out&lt;0<sp/>&amp;&amp;<sp/>(abs(lastOut)-abs(out))/dt<sp/>&gt;<sp/>0.01<sp/>)<sp/></highlight><highlight class="comment">//Changement<sp/>de<sp/>signe<sp/>(1%<sp/>a<sp/>-1%<sp/>d&apos;output<sp/>en<sp/>une<sp/>seconde)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score.nbInversion<sp/>=<sp/>score.nbInversion<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>lastOut=out;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">PID::PID(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modulo360,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frequency)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;currentProfile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dxF<sp/>=<sp/><ref refid="class_filtre" kindref="compound">Filtre</ref>(0,<sp/>frequency);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;tooFar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;close<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;modulo360<sp/>=<sp/>modulo360;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;timeTooFar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;lastOut=0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">PID::PID()<sp/>{}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Asservissement::compute(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lag<sp/>behind<sp/>represente<sp/>l&apos;avance<sp/>du<sp/>ghost<sp/>sur<sp/>le<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//C&apos;est<sp/>une<sp/>avance<sp/>projet√©e<sp/>selon<sp/>la<sp/>direction<sp/>du<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lagBehind<sp/>=<sp/>(*cGhost<sp/>-<sp/>*cRobot)<sp/>%<sp/>(directeur(cRobot-&gt;_theta));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>needToGoForward<sp/>=<sp/>(lagBehind<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>*outRotation<sp/>=<sp/>pidRotation.compute(cGhost-&gt;_theta,<sp/>cGhost-&gt;<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>,<sp/>cRobot-&gt;_theta,<sp/>cRobot-&gt;<ref refid="class_cinetique_1a605427ec93a1ea4b2460d0f6307e1e31" kindref="member">_w</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>*outTranslation<sp/>=<sp/>constrain(pidTranslation.compute(lagBehind,<sp/>cGhost-&gt;<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>,<sp/>0,<sp/>cRobot-&gt;<ref refid="class_cinetique_1a7fbbeae0349326d9ba8c8677a775f0ab" kindref="member">_v</ref>,<sp/>dt)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>-(1<sp/>-<sp/>abs(*outRotation)),<sp/>1<sp/>-<sp/>abs(*outRotation));<sp/></highlight><highlight class="comment">//La<sp/>rotation<sp/>est<sp/>prioritaire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>close<sp/>=<sp/>pidTranslation.close<sp/>&amp;&amp;<sp/>pidRotation.close;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>tooFar<sp/>=<sp/>pidTranslation.tooFar<sp/>||<sp/>pidRotation.tooFar<sp/>||<sp/>(*cGhost<sp/>-<sp/>*cRobot).norm()<sp/>&gt;<sp/>pidTranslation.getCurrentProfile()-&gt;epsilon;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Asservissement::reset()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>pidRotation.reset();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>pidTranslation.reset();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Asservissement::sendScoreToTelemetry()</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pidRotation.getScore().toTelemetry(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>pidTranslation.getScore().toTelemetry(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">Asservissement::Asservissement(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*outTranslation,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*outRotation,<sp/><ref refid="class_cinetique" kindref="compound">Cinetique</ref><sp/>*cRobot,<sp/><ref refid="class_cinetique" kindref="compound">Cinetique</ref><sp/>*cGhost,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frequency)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>pidRotation<sp/>=<sp/><ref refid="class_p_i_d" kindref="compound">PID</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>frequency);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>pidTranslation<sp/>=<sp/><ref refid="class_p_i_d" kindref="compound">PID</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>frequency);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;outTranslation<sp/>=<sp/>outTranslation;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;outRotation<sp/>=<sp/>outRotation;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cRobot<sp/>=<sp/>cRobot;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;cGhost<sp/>=<sp/>cGhost;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;tooFar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;close<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;needToGoForward<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Asservissement::setCurrentProfile(MoveProfileName<sp/>name)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>pidTranslation.setCurrentProfile(name);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>pidRotation.setCurrentProfile(name);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Asservissement::tweak(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>incr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>translation,<sp/>uint8_t<sp/>whichOne)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translation)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_move_profiles_1a8df56e4c608fbd3b9dd588d9fc78abd2" kindref="member">MoveProfiles::tweak</ref>(pidTranslation.currentProfile,incr,whichOne);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_move_profiles_1a8df56e4c608fbd3b9dd588d9fc78abd2" kindref="member">MoveProfiles::tweak</ref>(pidRotation.currentProfile,incr,whichOne);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Ensmasteel_Bot_2020/Teensy/lib/PID/PID.cpp"/>
  </compounddef>
</doxygen>
